// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authentication.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_authentication_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_authentication_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_authentication_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_authentication_2eproto {
  static const uint32_t offsets[];
};
namespace classic {
namespace protocol {
namespace v1 {
namespace authentication {
class AuthSessionResponse;
struct AuthSessionResponseDefaultTypeInternal;
extern AuthSessionResponseDefaultTypeInternal _AuthSessionResponse_default_instance_;
class OfflineCookie;
struct OfflineCookieDefaultTypeInternal;
extern OfflineCookieDefaultTypeInternal _OfflineCookie_default_instance_;
class OfflineCookies;
struct OfflineCookiesDefaultTypeInternal;
extern OfflineCookiesDefaultTypeInternal _OfflineCookies_default_instance_;
}  // namespace authentication
}  // namespace v1
}  // namespace protocol
}  // namespace classic
PROTOBUF_NAMESPACE_OPEN
template<> ::classic::protocol::v1::authentication::AuthSessionResponse* Arena::CreateMaybeMessage<::classic::protocol::v1::authentication::AuthSessionResponse>(Arena*);
template<> ::classic::protocol::v1::authentication::OfflineCookie* Arena::CreateMaybeMessage<::classic::protocol::v1::authentication::OfflineCookie>(Arena*);
template<> ::classic::protocol::v1::authentication::OfflineCookies* Arena::CreateMaybeMessage<::classic::protocol::v1::authentication::OfflineCookies>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace classic {
namespace protocol {
namespace v1 {
namespace authentication {

// ===================================================================

class AuthSessionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:classic.protocol.v1.authentication.AuthSessionResponse) */ {
 public:
  inline AuthSessionResponse() : AuthSessionResponse(nullptr) {}
  ~AuthSessionResponse() override;
  explicit PROTOBUF_CONSTEXPR AuthSessionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthSessionResponse(const AuthSessionResponse& from);
  AuthSessionResponse(AuthSessionResponse&& from) noexcept
    : AuthSessionResponse() {
    *this = ::std::move(from);
  }

  inline AuthSessionResponse& operator=(const AuthSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthSessionResponse& operator=(AuthSessionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AuthSessionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthSessionResponse* internal_default_instance() {
    return reinterpret_cast<const AuthSessionResponse*>(
               &_AuthSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AuthSessionResponse& a, AuthSessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthSessionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthSessionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthSessionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthSessionResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AuthSessionResponse& from);
  void MergeFrom(const AuthSessionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthSessionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "classic.protocol.v1.authentication.AuthSessionResponse";
  }
  protected:
  explicit AuthSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntitlementsFieldNumber = 1,
    kLocaleFieldNumber = 9,
    kAccountIdFieldNumber = 4,
    kIdFieldNumber = 5,
    kNotValidAfterFieldNumber = 6,
    kGameIdFieldNumber = 8,
  };
  // repeated string entitlements = 1;
  int entitlements_size() const;
  private:
  int _internal_entitlements_size() const;
  public:
  void clear_entitlements();
  const std::string& entitlements(int index) const;
  std::string* mutable_entitlements(int index);
  void set_entitlements(int index, const std::string& value);
  void set_entitlements(int index, std::string&& value);
  void set_entitlements(int index, const char* value);
  void set_entitlements(int index, const char* value, size_t size);
  std::string* add_entitlements();
  void add_entitlements(const std::string& value);
  void add_entitlements(std::string&& value);
  void add_entitlements(const char* value);
  void add_entitlements(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& entitlements() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_entitlements();
  private:
  const std::string& _internal_entitlements(int index) const;
  std::string* _internal_add_entitlements();
  public:

  // optional string locale = 9;
  bool has_locale() const;
  private:
  bool _internal_has_locale() const;
  public:
  void clear_locale();
  const std::string& locale() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_locale(ArgT0&& arg0, ArgT... args);
  std::string* mutable_locale();
  PROTOBUF_NODISCARD std::string* release_locale();
  void set_allocated_locale(std::string* locale);
  private:
  const std::string& _internal_locale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locale(const std::string& value);
  std::string* _internal_mutable_locale();
  public:

  // required int64 account_id = 4;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  int64_t account_id() const;
  void set_account_id(int64_t value);
  private:
  int64_t _internal_account_id() const;
  void _internal_set_account_id(int64_t value);
  public:

  // required int64 id = 5;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // required int64 not_valid_after = 6;
  bool has_not_valid_after() const;
  private:
  bool _internal_has_not_valid_after() const;
  public:
  void clear_not_valid_after();
  int64_t not_valid_after() const;
  void set_not_valid_after(int64_t value);
  private:
  int64_t _internal_not_valid_after() const;
  void _internal_set_not_valid_after(int64_t value);
  public:

  // required int64 game_id = 8;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  int64_t game_id() const;
  void set_game_id(int64_t value);
  private:
  int64_t _internal_game_id() const;
  void _internal_set_game_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:classic.protocol.v1.authentication.AuthSessionResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> entitlements_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locale_;
    int64_t account_id_;
    int64_t id_;
    int64_t not_valid_after_;
    int64_t game_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_authentication_2eproto;
};
// -------------------------------------------------------------------

class OfflineCookie final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:classic.protocol.v1.authentication.OfflineCookie) */ {
 public:
  inline OfflineCookie() : OfflineCookie(nullptr) {}
  ~OfflineCookie() override;
  explicit PROTOBUF_CONSTEXPR OfflineCookie(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OfflineCookie(const OfflineCookie& from);
  OfflineCookie(OfflineCookie&& from) noexcept
    : OfflineCookie() {
    *this = ::std::move(from);
  }

  inline OfflineCookie& operator=(const OfflineCookie& from) {
    CopyFrom(from);
    return *this;
  }
  inline OfflineCookie& operator=(OfflineCookie&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const OfflineCookie& default_instance() {
    return *internal_default_instance();
  }
  static inline const OfflineCookie* internal_default_instance() {
    return reinterpret_cast<const OfflineCookie*>(
               &_OfflineCookie_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OfflineCookie& a, OfflineCookie& b) {
    a.Swap(&b);
  }
  inline void Swap(OfflineCookie* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OfflineCookie* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OfflineCookie* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OfflineCookie>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OfflineCookie& from);
  void MergeFrom(const OfflineCookie& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OfflineCookie* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "classic.protocol.v1.authentication.OfflineCookie";
  }
  protected:
  explicit OfflineCookie(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtoNameFieldNumber = 1,
    kProtoPayloadFieldNumber = 2,
    kSignatureFieldNumber = 3,
    kGameIdFieldNumber = 4,
  };
  // required string proto_name = 1;
  bool has_proto_name() const;
  private:
  bool _internal_has_proto_name() const;
  public:
  void clear_proto_name();
  const std::string& proto_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proto_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proto_name();
  PROTOBUF_NODISCARD std::string* release_proto_name();
  void set_allocated_proto_name(std::string* proto_name);
  private:
  const std::string& _internal_proto_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_name(const std::string& value);
  std::string* _internal_mutable_proto_name();
  public:

  // required string proto_payload = 2;
  bool has_proto_payload() const;
  private:
  bool _internal_has_proto_payload() const;
  public:
  void clear_proto_payload();
  const std::string& proto_payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proto_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proto_payload();
  PROTOBUF_NODISCARD std::string* release_proto_payload();
  void set_allocated_proto_payload(std::string* proto_payload);
  private:
  const std::string& _internal_proto_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_payload(const std::string& value);
  std::string* _internal_mutable_proto_payload();
  public:

  // required string signature = 3;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // required int64 game_id = 4;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  int64_t game_id() const;
  void set_game_id(int64_t value);
  private:
  int64_t _internal_game_id() const;
  void _internal_set_game_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:classic.protocol.v1.authentication.OfflineCookie)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_payload_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    int64_t game_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_authentication_2eproto;
};
// -------------------------------------------------------------------

class OfflineCookies final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:classic.protocol.v1.authentication.OfflineCookies) */ {
 public:
  inline OfflineCookies() : OfflineCookies(nullptr) {}
  ~OfflineCookies() override;
  explicit PROTOBUF_CONSTEXPR OfflineCookies(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OfflineCookies(const OfflineCookies& from);
  OfflineCookies(OfflineCookies&& from) noexcept
    : OfflineCookies() {
    *this = ::std::move(from);
  }

  inline OfflineCookies& operator=(const OfflineCookies& from) {
    CopyFrom(from);
    return *this;
  }
  inline OfflineCookies& operator=(OfflineCookies&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const OfflineCookies& default_instance() {
    return *internal_default_instance();
  }
  static inline const OfflineCookies* internal_default_instance() {
    return reinterpret_cast<const OfflineCookies*>(
               &_OfflineCookies_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OfflineCookies& a, OfflineCookies& b) {
    a.Swap(&b);
  }
  inline void Swap(OfflineCookies* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OfflineCookies* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OfflineCookies* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OfflineCookies>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OfflineCookies& from);
  void MergeFrom(const OfflineCookies& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OfflineCookies* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "classic.protocol.v1.authentication.OfflineCookies";
  }
  protected:
  explicit OfflineCookies(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCookieFieldNumber = 5,
  };
  // repeated .classic.protocol.v1.authentication.OfflineCookie cookie = 5;
  int cookie_size() const;
  private:
  int _internal_cookie_size() const;
  public:
  void clear_cookie();
  ::classic::protocol::v1::authentication::OfflineCookie* mutable_cookie(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classic::protocol::v1::authentication::OfflineCookie >*
      mutable_cookie();
  private:
  const ::classic::protocol::v1::authentication::OfflineCookie& _internal_cookie(int index) const;
  ::classic::protocol::v1::authentication::OfflineCookie* _internal_add_cookie();
  public:
  const ::classic::protocol::v1::authentication::OfflineCookie& cookie(int index) const;
  ::classic::protocol::v1::authentication::OfflineCookie* add_cookie();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classic::protocol::v1::authentication::OfflineCookie >&
      cookie() const;

  // @@protoc_insertion_point(class_scope:classic.protocol.v1.authentication.OfflineCookies)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classic::protocol::v1::authentication::OfflineCookie > cookie_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_authentication_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthSessionResponse

// repeated string entitlements = 1;
inline int AuthSessionResponse::_internal_entitlements_size() const {
  return _impl_.entitlements_.size();
}
inline int AuthSessionResponse::entitlements_size() const {
  return _internal_entitlements_size();
}
inline void AuthSessionResponse::clear_entitlements() {
  _impl_.entitlements_.Clear();
}
inline std::string* AuthSessionResponse::add_entitlements() {
  std::string* _s = _internal_add_entitlements();
  // @@protoc_insertion_point(field_add_mutable:classic.protocol.v1.authentication.AuthSessionResponse.entitlements)
  return _s;
}
inline const std::string& AuthSessionResponse::_internal_entitlements(int index) const {
  return _impl_.entitlements_.Get(index);
}
inline const std::string& AuthSessionResponse::entitlements(int index) const {
  // @@protoc_insertion_point(field_get:classic.protocol.v1.authentication.AuthSessionResponse.entitlements)
  return _internal_entitlements(index);
}
inline std::string* AuthSessionResponse::mutable_entitlements(int index) {
  // @@protoc_insertion_point(field_mutable:classic.protocol.v1.authentication.AuthSessionResponse.entitlements)
  return _impl_.entitlements_.Mutable(index);
}
inline void AuthSessionResponse::set_entitlements(int index, const std::string& value) {
  _impl_.entitlements_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:classic.protocol.v1.authentication.AuthSessionResponse.entitlements)
}
inline void AuthSessionResponse::set_entitlements(int index, std::string&& value) {
  _impl_.entitlements_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:classic.protocol.v1.authentication.AuthSessionResponse.entitlements)
}
inline void AuthSessionResponse::set_entitlements(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.entitlements_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:classic.protocol.v1.authentication.AuthSessionResponse.entitlements)
}
inline void AuthSessionResponse::set_entitlements(int index, const char* value, size_t size) {
  _impl_.entitlements_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:classic.protocol.v1.authentication.AuthSessionResponse.entitlements)
}
inline std::string* AuthSessionResponse::_internal_add_entitlements() {
  return _impl_.entitlements_.Add();
}
inline void AuthSessionResponse::add_entitlements(const std::string& value) {
  _impl_.entitlements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:classic.protocol.v1.authentication.AuthSessionResponse.entitlements)
}
inline void AuthSessionResponse::add_entitlements(std::string&& value) {
  _impl_.entitlements_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:classic.protocol.v1.authentication.AuthSessionResponse.entitlements)
}
inline void AuthSessionResponse::add_entitlements(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.entitlements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:classic.protocol.v1.authentication.AuthSessionResponse.entitlements)
}
inline void AuthSessionResponse::add_entitlements(const char* value, size_t size) {
  _impl_.entitlements_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:classic.protocol.v1.authentication.AuthSessionResponse.entitlements)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AuthSessionResponse::entitlements() const {
  // @@protoc_insertion_point(field_list:classic.protocol.v1.authentication.AuthSessionResponse.entitlements)
  return _impl_.entitlements_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AuthSessionResponse::mutable_entitlements() {
  // @@protoc_insertion_point(field_mutable_list:classic.protocol.v1.authentication.AuthSessionResponse.entitlements)
  return &_impl_.entitlements_;
}

// required int64 account_id = 4;
inline bool AuthSessionResponse::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthSessionResponse::has_account_id() const {
  return _internal_has_account_id();
}
inline void AuthSessionResponse::clear_account_id() {
  _impl_.account_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t AuthSessionResponse::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int64_t AuthSessionResponse::account_id() const {
  // @@protoc_insertion_point(field_get:classic.protocol.v1.authentication.AuthSessionResponse.account_id)
  return _internal_account_id();
}
inline void AuthSessionResponse::_internal_set_account_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.account_id_ = value;
}
inline void AuthSessionResponse::set_account_id(int64_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:classic.protocol.v1.authentication.AuthSessionResponse.account_id)
}

// required int64 id = 5;
inline bool AuthSessionResponse::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AuthSessionResponse::has_id() const {
  return _internal_has_id();
}
inline void AuthSessionResponse::clear_id() {
  _impl_.id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t AuthSessionResponse::_internal_id() const {
  return _impl_.id_;
}
inline int64_t AuthSessionResponse::id() const {
  // @@protoc_insertion_point(field_get:classic.protocol.v1.authentication.AuthSessionResponse.id)
  return _internal_id();
}
inline void AuthSessionResponse::_internal_set_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}
inline void AuthSessionResponse::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:classic.protocol.v1.authentication.AuthSessionResponse.id)
}

// required int64 not_valid_after = 6;
inline bool AuthSessionResponse::_internal_has_not_valid_after() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AuthSessionResponse::has_not_valid_after() const {
  return _internal_has_not_valid_after();
}
inline void AuthSessionResponse::clear_not_valid_after() {
  _impl_.not_valid_after_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t AuthSessionResponse::_internal_not_valid_after() const {
  return _impl_.not_valid_after_;
}
inline int64_t AuthSessionResponse::not_valid_after() const {
  // @@protoc_insertion_point(field_get:classic.protocol.v1.authentication.AuthSessionResponse.not_valid_after)
  return _internal_not_valid_after();
}
inline void AuthSessionResponse::_internal_set_not_valid_after(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.not_valid_after_ = value;
}
inline void AuthSessionResponse::set_not_valid_after(int64_t value) {
  _internal_set_not_valid_after(value);
  // @@protoc_insertion_point(field_set:classic.protocol.v1.authentication.AuthSessionResponse.not_valid_after)
}

// required int64 game_id = 8;
inline bool AuthSessionResponse::_internal_has_game_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AuthSessionResponse::has_game_id() const {
  return _internal_has_game_id();
}
inline void AuthSessionResponse::clear_game_id() {
  _impl_.game_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t AuthSessionResponse::_internal_game_id() const {
  return _impl_.game_id_;
}
inline int64_t AuthSessionResponse::game_id() const {
  // @@protoc_insertion_point(field_get:classic.protocol.v1.authentication.AuthSessionResponse.game_id)
  return _internal_game_id();
}
inline void AuthSessionResponse::_internal_set_game_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.game_id_ = value;
}
inline void AuthSessionResponse::set_game_id(int64_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:classic.protocol.v1.authentication.AuthSessionResponse.game_id)
}

// optional string locale = 9;
inline bool AuthSessionResponse::_internal_has_locale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthSessionResponse::has_locale() const {
  return _internal_has_locale();
}
inline void AuthSessionResponse::clear_locale() {
  _impl_.locale_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthSessionResponse::locale() const {
  // @@protoc_insertion_point(field_get:classic.protocol.v1.authentication.AuthSessionResponse.locale)
  return _internal_locale();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthSessionResponse::set_locale(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.locale_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:classic.protocol.v1.authentication.AuthSessionResponse.locale)
}
inline std::string* AuthSessionResponse::mutable_locale() {
  std::string* _s = _internal_mutable_locale();
  // @@protoc_insertion_point(field_mutable:classic.protocol.v1.authentication.AuthSessionResponse.locale)
  return _s;
}
inline const std::string& AuthSessionResponse::_internal_locale() const {
  return _impl_.locale_.Get();
}
inline void AuthSessionResponse::_internal_set_locale(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.locale_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthSessionResponse::_internal_mutable_locale() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.locale_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthSessionResponse::release_locale() {
  // @@protoc_insertion_point(field_release:classic.protocol.v1.authentication.AuthSessionResponse.locale)
  if (!_internal_has_locale()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.locale_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.locale_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AuthSessionResponse::set_allocated_locale(std::string* locale) {
  if (locale != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.locale_.SetAllocated(locale, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.locale_.IsDefault()) {
    _impl_.locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:classic.protocol.v1.authentication.AuthSessionResponse.locale)
}

// -------------------------------------------------------------------

// OfflineCookie

// required string proto_name = 1;
inline bool OfflineCookie::_internal_has_proto_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OfflineCookie::has_proto_name() const {
  return _internal_has_proto_name();
}
inline void OfflineCookie::clear_proto_name() {
  _impl_.proto_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OfflineCookie::proto_name() const {
  // @@protoc_insertion_point(field_get:classic.protocol.v1.authentication.OfflineCookie.proto_name)
  return _internal_proto_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OfflineCookie::set_proto_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.proto_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:classic.protocol.v1.authentication.OfflineCookie.proto_name)
}
inline std::string* OfflineCookie::mutable_proto_name() {
  std::string* _s = _internal_mutable_proto_name();
  // @@protoc_insertion_point(field_mutable:classic.protocol.v1.authentication.OfflineCookie.proto_name)
  return _s;
}
inline const std::string& OfflineCookie::_internal_proto_name() const {
  return _impl_.proto_name_.Get();
}
inline void OfflineCookie::_internal_set_proto_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.proto_name_.Set(value, GetArenaForAllocation());
}
inline std::string* OfflineCookie::_internal_mutable_proto_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.proto_name_.Mutable(GetArenaForAllocation());
}
inline std::string* OfflineCookie::release_proto_name() {
  // @@protoc_insertion_point(field_release:classic.protocol.v1.authentication.OfflineCookie.proto_name)
  if (!_internal_has_proto_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.proto_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proto_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OfflineCookie::set_allocated_proto_name(std::string* proto_name) {
  if (proto_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.proto_name_.SetAllocated(proto_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.proto_name_.IsDefault()) {
    _impl_.proto_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:classic.protocol.v1.authentication.OfflineCookie.proto_name)
}

// required string proto_payload = 2;
inline bool OfflineCookie::_internal_has_proto_payload() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OfflineCookie::has_proto_payload() const {
  return _internal_has_proto_payload();
}
inline void OfflineCookie::clear_proto_payload() {
  _impl_.proto_payload_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OfflineCookie::proto_payload() const {
  // @@protoc_insertion_point(field_get:classic.protocol.v1.authentication.OfflineCookie.proto_payload)
  return _internal_proto_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OfflineCookie::set_proto_payload(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.proto_payload_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:classic.protocol.v1.authentication.OfflineCookie.proto_payload)
}
inline std::string* OfflineCookie::mutable_proto_payload() {
  std::string* _s = _internal_mutable_proto_payload();
  // @@protoc_insertion_point(field_mutable:classic.protocol.v1.authentication.OfflineCookie.proto_payload)
  return _s;
}
inline const std::string& OfflineCookie::_internal_proto_payload() const {
  return _impl_.proto_payload_.Get();
}
inline void OfflineCookie::_internal_set_proto_payload(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.proto_payload_.Set(value, GetArenaForAllocation());
}
inline std::string* OfflineCookie::_internal_mutable_proto_payload() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.proto_payload_.Mutable(GetArenaForAllocation());
}
inline std::string* OfflineCookie::release_proto_payload() {
  // @@protoc_insertion_point(field_release:classic.protocol.v1.authentication.OfflineCookie.proto_payload)
  if (!_internal_has_proto_payload()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.proto_payload_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proto_payload_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OfflineCookie::set_allocated_proto_payload(std::string* proto_payload) {
  if (proto_payload != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.proto_payload_.SetAllocated(proto_payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.proto_payload_.IsDefault()) {
    _impl_.proto_payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:classic.protocol.v1.authentication.OfflineCookie.proto_payload)
}

// required string signature = 3;
inline bool OfflineCookie::_internal_has_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OfflineCookie::has_signature() const {
  return _internal_has_signature();
}
inline void OfflineCookie::clear_signature() {
  _impl_.signature_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& OfflineCookie::signature() const {
  // @@protoc_insertion_point(field_get:classic.protocol.v1.authentication.OfflineCookie.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OfflineCookie::set_signature(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.signature_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:classic.protocol.v1.authentication.OfflineCookie.signature)
}
inline std::string* OfflineCookie::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:classic.protocol.v1.authentication.OfflineCookie.signature)
  return _s;
}
inline const std::string& OfflineCookie::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void OfflineCookie::_internal_set_signature(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* OfflineCookie::_internal_mutable_signature() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.signature_.Mutable(GetArenaForAllocation());
}
inline std::string* OfflineCookie::release_signature() {
  // @@protoc_insertion_point(field_release:classic.protocol.v1.authentication.OfflineCookie.signature)
  if (!_internal_has_signature()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.signature_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OfflineCookie::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:classic.protocol.v1.authentication.OfflineCookie.signature)
}

// required int64 game_id = 4;
inline bool OfflineCookie::_internal_has_game_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OfflineCookie::has_game_id() const {
  return _internal_has_game_id();
}
inline void OfflineCookie::clear_game_id() {
  _impl_.game_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t OfflineCookie::_internal_game_id() const {
  return _impl_.game_id_;
}
inline int64_t OfflineCookie::game_id() const {
  // @@protoc_insertion_point(field_get:classic.protocol.v1.authentication.OfflineCookie.game_id)
  return _internal_game_id();
}
inline void OfflineCookie::_internal_set_game_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.game_id_ = value;
}
inline void OfflineCookie::set_game_id(int64_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:classic.protocol.v1.authentication.OfflineCookie.game_id)
}

// -------------------------------------------------------------------

// OfflineCookies

// repeated .classic.protocol.v1.authentication.OfflineCookie cookie = 5;
inline int OfflineCookies::_internal_cookie_size() const {
  return _impl_.cookie_.size();
}
inline int OfflineCookies::cookie_size() const {
  return _internal_cookie_size();
}
inline void OfflineCookies::clear_cookie() {
  _impl_.cookie_.Clear();
}
inline ::classic::protocol::v1::authentication::OfflineCookie* OfflineCookies::mutable_cookie(int index) {
  // @@protoc_insertion_point(field_mutable:classic.protocol.v1.authentication.OfflineCookies.cookie)
  return _impl_.cookie_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classic::protocol::v1::authentication::OfflineCookie >*
OfflineCookies::mutable_cookie() {
  // @@protoc_insertion_point(field_mutable_list:classic.protocol.v1.authentication.OfflineCookies.cookie)
  return &_impl_.cookie_;
}
inline const ::classic::protocol::v1::authentication::OfflineCookie& OfflineCookies::_internal_cookie(int index) const {
  return _impl_.cookie_.Get(index);
}
inline const ::classic::protocol::v1::authentication::OfflineCookie& OfflineCookies::cookie(int index) const {
  // @@protoc_insertion_point(field_get:classic.protocol.v1.authentication.OfflineCookies.cookie)
  return _internal_cookie(index);
}
inline ::classic::protocol::v1::authentication::OfflineCookie* OfflineCookies::_internal_add_cookie() {
  return _impl_.cookie_.Add();
}
inline ::classic::protocol::v1::authentication::OfflineCookie* OfflineCookies::add_cookie() {
  ::classic::protocol::v1::authentication::OfflineCookie* _add = _internal_add_cookie();
  // @@protoc_insertion_point(field_add:classic.protocol.v1.authentication.OfflineCookies.cookie)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classic::protocol::v1::authentication::OfflineCookie >&
OfflineCookies::cookie() const {
  // @@protoc_insertion_point(field_list:classic.protocol.v1.authentication.OfflineCookies.cookie)
  return _impl_.cookie_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace authentication
}  // namespace v1
}  // namespace protocol
}  // namespace classic

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_authentication_2eproto
